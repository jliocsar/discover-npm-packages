{ argv, exit } from node:process
{ fetch } from undici
pino from pino
pretty from pino-pretty
minimist from minimist
removeMd from remove-markdown
{ Octokit } from octokit
type { TPackageNode, TPackage, TPackageDownloads } from ./types.civet
{ buildUrl, curry, ascByDownloads, writeJson } from ./utils.civet

NPM_REGISTRY_URL := 'https://registry.npmjs.org'
NPM_DOWNLOADS_API_URL := 'https://api.npmjs.org/downloads/point/last-month'
NPM_PACKAGE_URL := 'https://www.npmjs.com/package'
HARD_CRAWL_LIMIT := 5
DEFAULT_CRAWL_LIMIT := 2

octokit := new Octokit auth: process.env.GITHUB_PERSONAL_ACCESS_TOKEN!
logger := pino pretty { +colorize, +singleLine }

{ _: packages, crawl: crawlCount } := minimist argv.slice(2),
  alias: { c: 'crawl' }
  default: { crawl: DEFAULT_CRAWL_LIMIT }
adjustedCrawlCount .= crawlCount

if adjustedCrawlCount > HARD_CRAWL_LIMIT
  logger.warn 'Crawl limit is too high! Max. is %d', HARD_CRAWL_LIMIT
  exit 1

logger.info 'Running for %d packages, using crawl limit of %d', packages.length, adjustedCrawlCount

operator fromBufferOf := Buffer.from

function getNpmPackage(pkg: string)
  fetch buildUrl NPM_REGISTRY_URL, `${pkg}/latest` |> await |> .json()

function getNpmPackagesDownloads(pkg: string)
  fetch buildUrl NPM_DOWNLOADS_API_URL, pkg |> await |> .json()

function getReadme(owner: string, repo: string)
  octokit.rest.repos.getReadme { owner, repo }
    |> await
    |> .data.content
    |> & fromBufferOf 'base64'
    |> .toString()

function getReadmePreview(repositoryUrl: string)
  [owner, repo] := repositoryUrl
    |> .replace /^git:\/\/github\.com\//, ''
    |> .replace /\.git$/, ''
    |> .split '/'
  getReadme owner, repo
    |> await
    |> removeMd
    |> .slice 0, 1000
    |> & + '...'

function isGithub(npmPkg: TPackage)
  npmPkg.repository? and /^git:\/\/github\.com/.test npmPkg.repository.url

crawlNpmPackages := curry (crawls = 0, pkgs: string[]) ->
  await.all
    for pkg of pkgs
      npmPkg := (await getNpmPackage pkg) as TPackage
      npmPkgLastMonthDownloads := (await getNpmPackagesDownloads pkg) as TPackageDownloads
      node := {
        npmPkg{description}
        npmPkgLastMonthDownloads{downloads}
        name: pkg
        url: buildUrl NPM_PACKAGE_URL, pkg
        readmePreview: if isGithub npmPkg then await getReadmePreview npmPkg.repository.url
        children: unless crawls is adjustedCrawlCount
          Object.assign {}, npmPkg.dependencies, npmPkg.devDependencies, npmPkg.peerDependencies
            |> Object.keys
            |> crawlNpmPackages crawls + 1
            |> await
            |> .sort ascByDownloads
      } satisfies TPackageNode
      node ||> logger.info

function main
  packages
    |> crawlNpmPackages()
    |> await
    |> writeJson 'output.json'

await main()
